# -*- coding: utf-8 -*-
"""CP_vs_UNP_quantitative_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S4j6D3HSuoSl4hE05ZrEbBO1zTs8BbPb
"""

from google.colab import drive

# Commented out IPython magic to ensure Python compatibility.
import yfinance as yahooFinance
import datetime
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline

drive.mount('/content/gdrive')

Roic = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/CP_UNP_ROIC.xlsx')

display(pd.DataFrame(Roic))

plt.figure(figsize=(12, 6))
plt.plot(Roic['DATE'], Roic['CP_ROIC'], label='CP_Roic', marker='o', linestyle='-', color='blue')
plt.plot(Roic['DATE'], Roic['UNP_ROIC'], label='UNP_Roic', marker='o', linestyle='-', color='red')

plt.title('Comparison of CP and UNP Roic')
plt.xlabel('Date')
plt.ylabel('Percentage')
plt.xticks(rotation=45)
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

UNP_Balance_sheet = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/UNP_balance_sheet.xlsx')
UNP_Income_statement = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/UNP_income_statement.xlsx')
UNP_cash_flow_statement = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/UNP_cash_flow_statement.xlsx')

CP_Balance_sheet = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/CP_balance_sheet.xlsx')
CP_Income_statement = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/CP_income_statement.xlsx')
CP_cash_flow_statement = pd.read_excel(r'/content/gdrive/My Drive/Colab Notebooks/CP_cash_flow_statement.xlsx')

display(pd.DataFrame(UNP_Balance_sheet))

display(pd.DataFrame(CP_Balance_sheet))

cash_equivalents_UNP = UNP_Balance_sheet.iloc[2, 1:]
net_debt_UNP = UNP_Balance_sheet.iloc[33, 1:]

cash_equivalents_CP = CP_Balance_sheet.iloc[2, 1:]
net_debt_CP = CP_Balance_sheet.iloc[35, 1:]

cash_equivalents_UNP = pd.to_numeric(cash_equivalents_UNP, errors='coerce')
net_debt_UNP = pd.to_numeric(net_debt_UNP, errors='coerce')

cash_equivalents_CP = pd.to_numeric(cash_equivalents_CP, errors='coerce')
net_debt_CP = pd.to_numeric(net_debt_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

ax1.bar(UNP_Balance_sheet.columns[1:], cash_equivalents_UNP, label='Cash and Cash Equivalents UNP', alpha=0.7)
ax1.bar(UNP_Balance_sheet.columns[1:], net_debt_UNP, label='Net Debt UNP', alpha=0.4)
ax1.set_ylabel('Cash and Debt')
ax1.legend(loc='upper left')
ax1.grid(True)

ax2.bar(CP_Balance_sheet.columns[1:], cash_equivalents_CP, label='Cash and Cash Equivalents CP', alpha=0.7)
ax2.bar(CP_Balance_sheet.columns[1:], net_debt_CP, label='Net Debt CP', alpha=0.4)
ax2.set_xlabel('Year')
ax2.set_ylabel('Cash and Debt')
ax2.legend(loc='upper left')
ax2.grid(True)

plt.suptitle('Cash and Debt Comparison: UNP vs. CP')
plt.grid(axis='y')
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

initial_net_debt_UNP = net_debt_UNP.iloc[-1]
final_net_debt_UNP = net_debt_UNP.iloc[0]
percentage_net_debt_increase_UNP = ((final_net_debt_UNP - initial_net_debt_UNP) / initial_net_debt_UNP) * 100

initial_net_debt_CP = net_debt_CP.iloc[-1]
final_net_debt_CP = net_debt_CP.iloc[0]
percentage_net_debt_increase_CP = ((final_net_debt_CP - initial_net_debt_CP) / initial_net_debt_CP) * 100

print(f'Percentage Increase in UNP Net Debt: {percentage_net_debt_increase_UNP:.2f}%')
print(f'Percentage Increase in CP Net Debt: {percentage_net_debt_increase_CP:.2f}%')

share_outstanding_UNP = UNP_Balance_sheet.iloc[39, 1:]
share_outstanding_UNP = pd.to_numeric(share_outstanding_UNP, errors='coerce')

share_outstanding_CP = CP_Balance_sheet.iloc[41, 1:]
share_outstanding_CP = pd.to_numeric(share_outstanding_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

ax1.bar(UNP_Balance_sheet.columns[1:], share_outstanding_UNP, color='royalblue', label='UNP Share Outstanding')
ax1.set_xlabel('Year')
ax1.set_ylabel('UNP Share Outstanding')
ax1.legend(loc='upper left')

X1 = np.array(range(len(share_outstanding_UNP))).reshape(-1, 1)
y1 = share_outstanding_UNP
reg1 = LinearRegression().fit(X1, y1)
trendline_UNP = reg1.predict(X1)
ax1.plot(UNP_Balance_sheet.columns[1:], trendline_UNP, color='red', linestyle='--', label='UNP Trendline')
ax1.legend(loc='upper left')

ax2.bar(CP_Balance_sheet.columns[1:], share_outstanding_CP, color='orange', label='CP Share Outstanding')
ax2.set_xlabel('Year')
ax2.set_ylabel('CP Share Outstanding')
ax2.legend(loc='upper left')

X2 = np.array(range(len(share_outstanding_CP))).reshape(-1, 1)
y2 = share_outstanding_CP
reg2 = LinearRegression().fit(X2, y2)
trendline_CP = reg2.predict(X2)
ax2.plot(CP_Balance_sheet.columns[1:], trendline_CP, color='red', linestyle='--', label='CP Trendline')
ax2.legend(loc='upper left')

plt.suptitle('Share Outstanding Comparison: UNP vs. CP')
plt.grid(axis='y')
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

initial_share_outstanding_UNP = share_outstanding_UNP.iloc[-1]  #  the share_outstanding series objects, not lists so cannot  access by index [0].
final_share_outstanding_UNP = share_outstanding_UNP.iloc[0]  # but with .iloc[0]      ##[0] =2023, [-1] = 2013
percentage_change_UNP = ((final_share_outstanding_UNP - initial_share_outstanding_UNP) / initial_share_outstanding_UNP) * 100

initial_share_outstanding_CP = share_outstanding_CP.iloc[-1]
final_share_outstanding_CP = share_outstanding_CP.iloc[0]
percentage_change_CP = ((final_share_outstanding_CP - initial_share_outstanding_CP) / initial_share_outstanding_CP) * 100

print(f'Percentage Decrease in UNP Share Outstanding: {percentage_change_UNP:.2f}%')
print(f'Percentage Decrease in CP Share Outstanding: {percentage_change_CP:.2f}%')

display(pd.DataFrame(UNP_cash_flow_statement))

display(pd.DataFrame(CP_cash_flow_statement))

fcf_UNP = UNP_cash_flow_statement.iloc[14, 1:]
fcf_UNP = pd.to_numeric(fcf_UNP, errors='coerce')

fcf_CP = CP_cash_flow_statement.iloc[13, 1:]
fcf_CP = pd.to_numeric(fcf_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

ax1.bar(UNP_cash_flow_statement.columns[1:], fcf_UNP, color='royalblue', label='UNP FCF')
ax1.set_xlabel('Year')
ax1.set_ylabel('UNP FCF')
ax1.legend(loc='upper left')

X1 = np.array(range(len(fcf_UNP))).reshape(-1, 1)
y1 = fcf_UNP
reg1 = LinearRegression().fit(X1, y1)
trendline_UNP = reg1.predict(X1)
ax1.plot(UNP_cash_flow_statement.columns[1:], trendline_UNP, color='red', linestyle='--', label='UNP Trendline')
ax1.legend(loc='upper left')

ax2.bar(CP_cash_flow_statement.columns[1:], fcf_CP, color='orange', label='CP FCF')
ax2.set_xlabel('Year')
ax2.set_ylabel('CP FCF')
ax2.legend(loc='upper left')

X2 = np.array(range(len(fcf_CP))).reshape(-1, 1)
y2 = fcf_CP
reg2 = LinearRegression().fit(X2, y2)
trendline_CP = reg2.predict(X2)
ax2.plot(CP_cash_flow_statement.columns[1:], trendline_CP, color='red', linestyle='--', label='CP Trendline')
ax2.legend(loc='upper left')

plt.suptitle('FCF Comparison: UNP vs. CP')
plt.grid(axis='y')
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

initial_fcf_UNP = fcf_UNP.iloc[-1]
final_fcf_UNP = fcf_UNP.iloc[0]
percentage_fcf_change_UNP = ((final_fcf_UNP - initial_fcf_UNP) / initial_fcf_UNP) * 100

initial_fcf_CP = fcf_CP.iloc[-1]
final_fcf_CP = fcf_CP.iloc[0]
percentage_fcf_change_CP = ((final_fcf_CP - initial_fcf_CP) / initial_fcf_CP) * 100

print(f'Percentage Increase in UNP FCF: {percentage_fcf_change_UNP:.2f}%')
print(f'Percentage Increase in CP FCF: {percentage_fcf_change_CP:.2f}%')

current_liabilities_UNP = UNP_Balance_sheet.iloc[18, 1:]
current_liabilities_CP = CP_Balance_sheet.iloc[16, 1:]

current_liabilities_UNP = pd.to_numeric(current_liabilities_UNP, errors='coerce')
current_liabilities_CP = pd.to_numeric(current_liabilities_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

ax1.bar(UNP_cash_flow_statement.columns[1:], fcf_UNP, label='FCF UNP', alpha=0.6)
ax1.bar(UNP_Balance_sheet.columns[1:], current_liabilities_UNP, label='Current Liabilities UNP', alpha=0.6)
ax1.set_ylabel('FCF and Liabilities')
ax1.legend(loc='upper left')
ax1.grid(True)

ax2.bar(CP_cash_flow_statement.columns[1:], fcf_CP, label='FCF CP', alpha=0.6)
ax2.bar(CP_Balance_sheet.columns[1:], current_liabilities_CP, label='Current Liabilities CP', alpha=0.6)
ax2.set_xlabel('Year')
ax2.set_ylabel('FCF and Liabilities')
ax2.legend(loc='upper left')
ax2.grid(True)


plt.suptitle('FCF and Current Liabilities Comparison: UNP vs. CP')
plt.grid(axis='y')
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

capital_expenditures_UNP = UNP_cash_flow_statement.iloc[7, 1:]
capital_expenditures_UNP = pd.to_numeric(capital_expenditures_UNP, errors='coerce')

capital_expenditures_CP = CP_cash_flow_statement.iloc[7, 1:]
capital_expenditures_CP = pd.to_numeric(capital_expenditures_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12), sharex=True)

ax1.bar(UNP_cash_flow_statement.columns[1:], capital_expenditures_UNP, color='lightblue', label='UNP CAPEX')
ax1.set_xlabel('Year')
ax1.set_ylabel('UNP CAPEX')
ax1.legend(loc='upper left')

X1 = np.array(range(len(capital_expenditures_UNP))).reshape(-1, 1)
y1 = capital_expenditures_UNP
reg1 = LinearRegression().fit(X1, y1)
trendline_UNP = reg1.predict(X1)
ax1.plot(UNP_cash_flow_statement.columns[1:], trendline_UNP, color='red', linestyle='--', label='UNP Trendline')
ax1.legend(loc='upper left')

ax2.bar(CP_cash_flow_statement.columns[1:], capital_expenditures_CP, color='yellow', label='CP CAPEX')
ax2.set_xlabel('Year')
ax2.set_ylabel('CP CAPEX')
ax2.legend(loc='upper left')

X2 = np.array(range(len(capital_expenditures_CP))).reshape(-1, 1)
y2 = capital_expenditures_CP
reg2 = LinearRegression().fit(X2, y2)
trendline_CP = reg2.predict(X2)
ax2.plot(CP_cash_flow_statement.columns[1:], trendline_CP, color='red', linestyle='--', label='CP Trendline')
ax2.legend(loc='upper left')

plt.suptitle('CAPEX Comparison: UNP vs. CP')
plt.grid(axis='y')
plt.tight_layout(rect=[0, 0, 1, 0.97])
plt.show()

initial_capex_UNP = capital_expenditures_UNP.iloc[-1]
final_capex_UNP = capital_expenditures_UNP.iloc[0]
percentage_capex_change_UNP = ((final_capex_UNP - initial_capex_UNP) / initial_capex_UNP) * 100

initial_capex_CP = capital_expenditures_CP.iloc[-1]
final_capex_CP = capital_expenditures_CP.iloc[0]
percentage_capex_change_CP = ((final_capex_CP - initial_capex_CP) / initial_capex_CP) * 100

print(f'Percentage Change in UNP CAPEX: {percentage_capex_change_UNP:.2f}%')
print(f'Percentage Change in CP CAPEX: {percentage_capex_change_CP:.2f}%')

display(pd.DataFrame(UNP_Income_statement))

display(pd.DataFrame(CP_Income_statement))

revenue_UNP = UNP_Income_statement.iloc[0, 1:]
cost_of_revenue_UNP = UNP_Income_statement.iloc[1, 1:]
gross_profit_margin_UNP = UNP_Income_statement.iloc[3, 1:]
revenue_UNP = pd.to_numeric(revenue_UNP, errors='coerce')
cost_of_revenue_UNP = pd.to_numeric(cost_of_revenue_UNP, errors='coerce')
gross_profit_margin_UNP = pd.to_numeric(gross_profit_margin_UNP, errors='coerce')

revenue_CP = CP_Income_statement.iloc[0, 1:]
cost_of_revenue_CP = CP_Income_statement.iloc[1, 1:]
gross_profit_margin_CP = CP_Income_statement.iloc[3, 1:]
revenue_CP = pd.to_numeric(revenue_CP, errors='coerce')
cost_of_revenue_CP = pd.to_numeric(cost_of_revenue_CP, errors='coerce')
gross_profit_margin_CP = pd.to_numeric(gross_profit_margin_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))

ax1.set_xlabel('Year')
ax1.set_ylabel('Revenue / Cost of Revenue', color='tab:blue')
ax1.bar(UNP_Income_statement.columns[1:], revenue_UNP, color='royalblue', label='Revenue UNP', alpha=0.6)
ax1.bar(UNP_Income_statement.columns[1:], cost_of_revenue_UNP, color='lightcoral', label='Cost of Revenue UNP', alpha=0.6)
ax1.tick_params(axis='y', labelcolor='tab:blue')

ax2_1 = ax1.twinx()
ax2_1.set_ylabel('Gross Profit Margin %', color='tab:red')
ax2_1.plot(UNP_Income_statement.columns[1:], gross_profit_margin_UNP, color='tab:red', marker='o', label='Gross Profit Margin % UNP')
ax2_1.tick_params(axis='y', labelcolor='tab:red')

ax1.set_title('UNP: Revenue, Cost of Revenue, and Gross Profit Margin')


ax2.set_xlabel('Year')
ax2.set_ylabel('Revenue / Cost of Revenue', color='tab:blue')
ax2.bar(CP_Income_statement.columns[1:], revenue_CP, color='darkblue', label='Revenue CP', alpha=0.6)
ax2.bar(CP_Income_statement.columns[1:], cost_of_revenue_CP, color='orangered', label='Cost of Revenue CP', alpha=0.6)
ax2.tick_params(axis='y', labelcolor='tab:blue')

ax2_2 = ax2.twinx()
ax2_2.set_ylabel('Gross Profit Margin %', color='tab:red')
ax2_2.plot(CP_Income_statement.columns[1:], gross_profit_margin_CP, color='tab:red', marker='o', label='Gross Profit Margin % CP')
ax2_2.tick_params(axis='y', labelcolor='tab:red')

ax2.set_title('CP: Revenue, Cost of Revenue, and Gross Profit Margin')

plt.tight_layout()
plt.show()

#revenue
revenue_UNP = UNP_Income_statement.iloc[0, 1:]
revenue_UNP = pd.to_numeric(revenue_UNP, errors='coerce')

revenue_CP = CP_Income_statement.iloc[0, 1:]
revenue_CP = pd.to_numeric(revenue_CP, errors='coerce')

initial_revenue_UNP = revenue_UNP.iloc[-1]
final_revenue_UNP = revenue_UNP.iloc[0]
percentage_rev_change_UNP = ((final_revenue_UNP - initial_revenue_UNP) / initial_revenue_UNP) * 100

initial_revenue_CP = revenue_CP.iloc[-1]
final_revenue_CP = revenue_CP.iloc[0]
percentage_rev_change_CP = ((final_revenue_CP - initial_revenue_CP) / initial_revenue_CP) * 100

print(f'Percentage Change in UNP CAPEX: {percentage_rev_change_UNP:.2f}%')
print(f'Percentage Change in CP CAPEX: {percentage_rev_change_CP:.2f}%')

income_UNP = UNP_Income_statement.iloc[17, 1:]
operating_margin_UNP = UNP_Income_statement.iloc[8, 1:]
income_UNP = pd.to_numeric(income_UNP, errors='coerce')
operating_margin_UNP = pd.to_numeric(operating_margin_UNP, errors='coerce')

income_CP = CP_Income_statement.iloc[17, 1:]
operating_margin_CP = CP_Income_statement.iloc[8, 1:]
income_CP = pd.to_numeric(income_CP, errors='coerce')
operating_margin_CP = pd.to_numeric(operating_margin_CP, errors='coerce')

fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))

ax1.set_xlabel('Year')
ax1.set_ylabel('Net Income', color='tab:blue')
ax1.bar(UNP_Income_statement.columns[1:], income_UNP, color='lightcoral', label='Income UNP', alpha=0.6)
ax1.tick_params(axis='y', labelcolor='tab:blue')

ax2_1 = ax1.twinx()
ax2_1.set_ylabel('Operating Margin %', color='tab:red')
ax2_1.plot(UNP_Income_statement.columns[1:], operating_margin_UNP, color='tab:red', marker='o', label='Operating Margin % UNP')
ax2_1.tick_params(axis='y', labelcolor='tab:red')

ax1.set_title('UNP: Income and Operating Margin')


ax2.set_xlabel('Year')
ax2.set_ylabel('Net Income', color='tab:blue')
ax2.bar(CP_Income_statement.columns[1:], income_CP, color='orange', label='Income CP', alpha=0.6)
ax2.tick_params(axis='y', labelcolor='tab:blue')

ax2_2 = ax2.twinx()
ax2_2.set_ylabel('Operating Margin %', color='tab:red')
ax2_2.plot(CP_Income_statement.columns[1:], operating_margin_CP, color='tab:red', marker='o', label='Operating Margin % CP')
ax2_2.tick_params(axis='y', labelcolor='tab:red')

ax2.set_title('CP: Income and Operating Margin')

plt.tight_layout()
plt.show()

initial_income_UNP = income_UNP.iloc[-1]
final_income_UNP = income_UNP.iloc[0]
percentage_income_change_UNP = ((final_income_UNP - initial_income_UNP) / initial_income_UNP) * 100

initial_income_CP = income_CP.iloc[-1]
final_income_CP = income_CP.iloc[0]
percentage_income_change_CP = ((final_income_CP - initial_income_CP) / initial_income_CP) * 100

print(f'Percentage Change in UNP Income: {percentage_income_change_UNP:.2f}%')
print(f'Percentage Change in CP Income: {percentage_income_change_CP:.2f}%')

interest_UNP = UNP_Income_statement.iloc[10, 1:]
interest_UNP = pd.to_numeric(interest_UNP, errors='coerce')

interest_CP = CP_Income_statement.iloc[10, 1:]
interest_CP = pd.to_numeric(interest_CP, errors='coerce')

plt.figure(figsize=(12, 6))
plt.bar(UNP_Income_statement.columns[1:], interest_UNP, color='royalblue', label='Interest Expense UNP',alpha=0.6)
plt.bar(CP_Income_statement.columns[1:], interest_CP, color='orange', label='Interest Expense CP',alpha=0.5)

X1 = np.array(range(len(interest_UNP))).reshape(-1, 1)
y1 = interest_UNP.values
reg1 = LinearRegression().fit(X1, y1)
trendline1 = reg1.predict(X1)

X2 = np.array(range(len(interest_CP))).reshape(-1, 1)
y2 = interest_CP.values
reg2 = LinearRegression().fit(X2, y2)
trendline2 = reg2.predict(X2)

plt.plot(UNP_Income_statement.columns[1:], trendline1, color='red', linestyle='--', label='Trend UNP')
plt.plot(CP_Income_statement.columns[1:], trendline2, color='purple', linestyle='--', label='Trend CP')


plt.title('Interest Expense UNP vs CP')
plt.xlabel('Year')
plt.ylabel('Interest Expense amount')
plt.grid(axis='y')
plt.legend()
plt.show()

initial_interest_UNP = interest_UNP.iloc[-1]
final_interest_UNP = interest_UNP.iloc[0]
percentage_interest_change_UNP = ((final_interest_UNP - initial_interest_UNP) / initial_interest_UNP) * 100

initial_interest_CP = interest_CP.iloc[-1]
final_interest_CP = interest_CP.iloc[0]
percentage_interest_change_CP = ((final_interest_CP - initial_interest_CP) / initial_interest_CP) * 100

print(f'Percentage Change in UNP Interest Expenses: {percentage_interest_change_UNP:.2f}%')
print(f'Percentage Change in CP Interest Expenses: {percentage_interest_change_CP:.2f}%')

from google.colab import files
from IPython.display import Image

uploaded = files.upload()

Image('Canadian_Pacific_railways.png')

Image('UNP_railway_network.png')





